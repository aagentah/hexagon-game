//----- FUNCTIONS --------------//

@function vfr($l, $c) {
  @return (($l/(($c * 3) + 1)) * 1.73);
}
@function hfr($l, $c) {
  @return (($l/(($c * 2) + 1)) * 0.578);
}

@function hGridHeight($gridWidth, $rowCount, $columnCount) {
  @return hfr($gridWidth, $columnCount) * (($rowCount * 3) + 1);
}
@function hGridWidth($gridHeight, $rowCount, $columnCount) {
  @return vfr($gridHeight, $rowCount) * (($columnCount * 2) + 1);
}

@function vGridHeight($gridWidth, $rowCount, $columnCount) {
  @return vfr($gridWidth, $columnCount) * (($rowCount * 2) + 1);
}
@function vGridWidth($gridHeight, $rowCount, $columnCount) {
  @return hfr($gridHeight, $rowCount) * (($columnCount * 3) + 1);
}

@function hexRatio($num) {
  @return $num * 1.156;
}
@function hexRatioInv($num) {
  @return $num * 0.865;
}

@function increment($num, $pos) {
  @for $i from 1 to $num {
    $pos: $pos + 2;
  }
  @return $pos;
}
//----- MIXINS -----------------//

@mixin hexWrapper(
  $gridWidth,
  $gridHeight,
  $gridOrient,
  $rowCount,
  $columnCount
) {
  @if $gridOrient == horizontal {
    @if $gridHeight == auto {
      $gridHeight: hGridHeight($gridWidth, $rowCount, $columnCount);
    } @else if $gridWidth == auto {
      $gridWidth: hGridWidth($gridHeight, $rowCount, $columnCount);
    }
  } @else if $gridOrient == vertical {
    @if $gridHeight == auto {
      $gridHeight: vGridHeight($gridWidth, $rowCount, $columnCount);
    } @else if $gridWidth == auto {
      $gridWidth: vGridWidth($gridHeight, $rowCount, $columnCount);
    }
  }
  height: $gridHeight;
  width: $gridWidth;
}

@mixin hexCrop($crop, $cropFactor) {
  position: relative;
  @if $crop == none {
    overflow: visible;
  } @else if $crop == crop {
    overflow: hidden;
    .hexContainer {
      transform: scale($cropFactor);
    }
  }
}

@mixin hexStyle($gridOrient, $hexContent, $hexMargin, $hexSize) {
  @if $hexContent == center and $hexSize == auto {
    height: 100%;
    width: 100%;
  }
  @if $gridOrient == vertical {
    @if $hexContent == center and $hexSize != auto {
      height: $hexSize;
      width: hexRatio($hexSize);
    }
    -webkit-clip-path: polygon(
      75% 0,
      100% 50%,
      75% 100%,
      25% 100%,
      0 50%,
      25% 0
    );
    clip-path: polygon(75% 0, 100% 50%, 75% 100%, 25% 100%, 0 50%, 25% 0);
  } @else if $gridOrient == horizontal {
    @if $hexContent == center and $hexSize != auto {
      height: hexRatio($hexSize);
      width: $hexSize;
    }
    -webkit-clip-path: polygon(
      50% 0%,
      100% 25%,
      100% 75%,
      50% 100%,
      0% 75%,
      0% 25%
    );
    clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
  }
  background-size: cover;
  @if $gridOrient == vertical {
    margin: (hexRatioInv($hexMargin)) $hexMargin;
  } @else if $gridOrient == horizontal {
    margin: $hexMargin (hexRatioInv($hexMargin));
  }
}

@mixin hexContainer(
  $gridWidth,
  $gridHeight,
  $gridOrient,
  $columnCount,
  $rowCount,
  $hexLayout,
  $hexContent,
  $hexMargin,
  $hexCount,
  $hexSize
) {
  display: grid;
  justify-items: $hexContent;
  align-items: $hexContent;
  @if $rowCount == auto {
    $l: ceil($hexCount / $columnCount);
    $rowCount: $l;
  } @else if $columnCount == auto {
    $l: ceil($hexCount / $rowCount);
    $columnCount: $l;
  } @else if $hexCount == auto {
    $hexCount: $rowCount * $columnCount;
  }
  @if $gridOrient == horizontal {
    @if $gridHeight == auto {
      $gridHeight: hGridHeight($gridWidth, $rowCount, $columnCount);
    } @else if $gridWidth == auto {
      $gridWidth: hGridWidth($gridHeight, $rowCount, $columnCount);
    }
  } @else if $gridOrient == vertical {
    @if $gridHeight == auto {
      $gridHeight: vGridHeight($gridWidth, $rowCount, $columnCount);
    } @else if $gridWidth == auto {
      $gridWidth: vGridWidth($gridHeight, $rowCount, $columnCount);
    }
  }
  height: $gridHeight;
  width: $gridWidth;
  @include gridTemplate(
    $gridOrient,
    $columnCount,
    $rowCount,
    $gridWidth,
    $hexCount
  );
  @include layout($columnCount, $rowCount, $hexLayout, $gridOrient, $hexCount);
  .hex {
    @include hexStyle($gridOrient, $hexContent, $hexMargin, $hexSize);
  }
}

@mixin gridTemplate(
  $gridOrient,
  $columnCount,
  $rowCount,
  $gridWidth,
  $hexCount
) {
  @if $gridOrient == vertical {
    grid-template-columns: repeat($columnCount, 1fr 2fr) 1fr;
    grid-template-rows: repeat(
      ($rowCount * 2+1),
      vfr($gridWidth, $columnCount)
    );
  } @else if $gridOrient == horizontal {
    grid-template-columns: repeat(($columnCount * 2+1), 1fr);
    grid-template-rows:
      repeat(
        $rowCount,
        hfr($gridWidth, $columnCount) (hfr($gridWidth, $columnCount) * 2)
      )
      hfr($gridWidth, $columnCount);
  }
}

@mixin layout($columnCount, $rowCount, $hexLayout, $gridOrient, $hexCount) {
  @if $hexLayout == strict {
    @include address($columnCount, $rowCount, $gridOrient);
  } @else if $hexLayout == column {
    .hex {
      display: none;
    }
    @include address($columnCount, $rowCount, $gridOrient);
    $c: 1;
    $r: 1;
    @for $i from 1 through ($hexCount) {
      @if $r > $rowCount {
        $r: 1;
        $c: $c + 1;
      }
      .hex:nth-child(#{$i}) {
        display: flex;
        align-items: center;
        justify-content: center;
        @if $gridOrient == vertical {
          @extend .r-#{$r};
          @extend .c-#{$c};
        } @else if $gridOrient == horizontal {
          @extend .r-#{$r};
          @extend .c-#{$c};
        }
      }
      $r: $r + 1;
    }
  } @else if $hexLayout == row {
    .hex {
      display: none;
    }
    @include address($columnCount, $rowCount, $gridOrient);
    $c: 1;
    $r: 1;
    @for $i from 1 through ($hexCount) {
      @if $c > $columnCount {
        $r: $r + 1;
        $c: 1;
      }
      .hex:nth-child(#{$i}) {
        display: flex;
        align-items: center;
        justify-content: center;
        @if $gridOrient == vertical {
          @extend .r-#{$r};
          @extend .c-#{$c};
        } @else if $gridOrient == horizontal {
          @extend .r-#{$r};
          @extend .c-#{$c};
        }
      }
      $c: $c + 1;
    }
  }
}

@mixin address($columnCount, $rowCount, $gridOrient) {
  @if $gridOrient == vertical {
    @for $ci from 1 to ($columnCount + 1) {
      $cPos: 1;
      @if $ci > 1 {
        $cPos: increment($ci, $cPos);
      }
      .c-#{$ci} {
        grid-column-start: $cPos;
        grid-column-end: span 3;
      }
      @for $ri from 1 to ($rowCount + 1) {
        $rPos: 1;
        @if $ci % 2 == 0 {
          $rPos: 2;
        }
        @if $ri > 1 {
          $rPos: increment($ri, $rPos);
        }
        .c-#{$ci}.r-#{$ri} {
          grid-row-start: $rPos;
          grid-row-end: span 2;
        }
      }
    }
  } @else if $gridOrient == horizontal {
    @for $ri from 1 to ($rowCount + 1) {
      $rPos: 1;
      @if $ri > 1 {
        $rPos: increment($ri, $rPos);
      }
      .r-#{$ri} {
        grid-row-start: $rPos;
        grid-row-end: span 3;
      }
      @for $ci from 1 to ($columnCount + 1) {
        $cPos: 1;
        @if $ri % 2 == 0 {
          $cPos: 2;
        }
        @if $ci > 1 {
          $cPos: increment($ci, $cPos);
        }
        .r-#{$ri}.c-#{$ci} {
          grid-column-start: $cPos;
          grid-column-end: span 2;
        }
      }
    }
  }
}

//--- TEMPLATE -------------------------------//
#hexGrid {
  margin: 0 auto;
  //--- SETTINGS -------------- VALUES ---------//
  $gridWidth: 1080px; // 'auto',(px,pt,r/em,vw/h)
  $gridHeight: auto; // 'auto',(px,pt,r/em,vw/h)
  $columnCount: 15; // 'auto',(number)
  $rowCount: 8; // 'auto',(number)
  $hexCount: auto; // 'auto',(number)
  $hexLayout: row; // 'row','column','strict'
  $gridOrient: vertical; // 'vertical','horizontal'
  $crop: none; // 'none','crop'
  $cropFactor: 1; // (number)
  $hexContent: auto; // 'auto','center'
  $hexSize: auto; // 'auto',(px,pt,r/em,vw/h)
  $hexMargin: 3px; // (px,pt,r/em,vw/h)
  //--- MIXINS ---------------------------------//
  @include hexWrapper(
    $gridWidth,
    $gridHeight,
    $gridOrient,
    $rowCount,
    $columnCount
  );
  .hexCrop {
    @include hexCrop($crop, $cropFactor);
  }
  .hexGrid {
    @include hexContainer(
      $gridWidth,
      $gridHeight,
      $gridOrient,
      $columnCount,
      $rowCount,
      $hexLayout,
      $hexContent,
      $hexMargin,
      $hexCount,
      $hexSize
    );
  }
  //--- CUSTOM STYLES --------------------------//

  //--------------------------------------------//
}
